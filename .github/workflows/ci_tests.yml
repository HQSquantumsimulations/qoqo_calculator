name: ci_tests

on:
  # push:
  #   branches: [main]
  pull_request:
    branches: [main]

jobs:
  test_pyproject_install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        default: true
    - uses: Swatinem/rust-cache@v1.4.0
    - name: Install dependencies
      run: |
        pip install maturin pytest numpy
        pip install ./qoqo_calculator_pyo3
    - name: test
      run: |
        pytest ./qoqo_calculator_pyo3/python_tests
  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v1.4.0
      - run: |
          sudo apt install -y clang-12
          cargo clippy -- -D warnings

  unittests_check:
    name: unittests_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: "macOS-latest", rust: "x86_64-apple-darwin" },
          { runs_on: "windows-latest", rust: "x86_64-pc-windows-msvc" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked
          cargo fmt --all -- --check
  
  unittests_check_linux:
    name: unittests_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: "ubuntu-latest",  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - run: |
          python -m pip install numpy
          sudo apt install -y clang-12
          cargo test --workspace --no-default-features --locked
          cargo fmt --all -- --check
    
  test_maturin_builds_linux:
    name: maturin_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'ubuntu-latest',  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: Swatinem/rust-cache@v1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - name: linux wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          manylinux: 2010
          args: -i python${{ matrix.python.py }} --out wheels --no-sdist -m qoqo_calculator_pyo3/Cargo.toml --cargo-extra-args="--locked"
      - name: test install
        run: |
          pip install wheels/* --force-reinstall
  
  test_src_dist_builds_linux:
    name: maturin_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'ubuntu-latest',  rust: "x86_64-unknown-linux-gnu" },
        ]
        python: [
            {py: '3.9', interpreter: "python3.9"},
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: Swatinem/rust-cache@v1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - name: linux wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: sdist
          args: --out wheels -m qoqo_calculator_pyo3/Cargo.toml
      - name: test install
        run: |
          pip install wheels/* --force-reinstall
  
  test_maturin_builds_windows:
    name: maturin_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'windows-latest', rust: "x86_64-pc-windows-msvc" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.combinations.rust }}
          default: true
      - uses: Swatinem/rust-cache@v1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          # cache: 'pip'
      - name: windows wheels
        uses: messense/maturin-action@v1
        with:
          maturin-version: latest
          command: build
          args: -i python --out wheels --no-sdist -m qoqo_calculator_pyo3/Cargo.toml --cargo-extra-args="--locked"

  test_maturin_builds_macos:
    name: maturin_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'macOS-latest', rust: "aarch64-apple-darwin" },
        ]
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: "aarch64-apple-darwin"
          default: true
      - uses: Swatinem/rust-cache@v1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip maturin pytest numpy twine        
      - name: macos wheels
        if: ${{ matrix.combinations.runs_on == 'macOS-latest' && matrix.python-version < '3.8'}}
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --out wheels --no-sdist -m qoqo_calculator_pyo3/Cargo.toml --cargo-extra-args="--locked"
      - name: universal wheels
        if: ${{ matrix.combinations.runs_on == 'macOS-latest' && matrix.python-version >= '3.8' }}
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" maturin build -i ${{ matrix.python.interpreter }} --out wheels --universal2 --no-sdist -m qoqo_calculator_pyo3/Cargo.toml --cargo-extra-args="--locked"
      - name: test install
        run: |
          pip install wheels/* --force-reinstall
  
  test_maturin_src_builds_macos:
    name: maturin_check-${{ matrix.combinations.runs_on }}
    runs-on: ${{ matrix.combinations.runs_on }}
    strategy:
      matrix:
        combinations: [
          { runs_on: 'macOS-latest', rust: "aarch64-apple-darwin" },
        ]
        python: [
            {py: '3.10', interpreter: "python3.10"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: "aarch64-apple-darwin"
          default: true
      - uses: Swatinem/rust-cache@v1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip maturin pytest numpy twine        
      - name: universal wheels
        run: |
          maturin sdist --out wheels -m qoqo_calculator_pyo3/Cargo.toml
      - name: test install
        run: |
          RUSTFLAGS="-C link-arg=-undefined -C link-arg=dynamic_lookup" pip install wheels/* --force-reinstall
  
  doctest_check:
    name: unittests_check-${{ matrix.combinations.runs_on }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          default: true
      - uses: Swatinem/rust-cache@v1.4.0
      - run: |
          cargo test --doc --package=qoqo_calculator

  code_coverage_rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            components: clippy
            override: true
      - uses: Swatinem/rust-cache@v1.4.0
      - run: |
          rustup component add llvm-tools-preview
          export RUSTFLAGS="-Zinstrument-coverage"
          export RUSTDOCFLAGS="-Zinstrument-coverage"
          cargo build --verbose --locked
          LLVM_PROFILE_FILE="coverage-%p-%m.profraw" cargo +nightly test --package=qoqo_calculator --no-default-features
          cd qoqo_calculator/
          cargo install grcov
          grcov . --binary-path ../target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "cargo" --ignore "/mod.rs" --ignore "/lib.rs" --ignore "*/_auto_generated_operations.rs" --keep-only "src/*" -o lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          # token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true
