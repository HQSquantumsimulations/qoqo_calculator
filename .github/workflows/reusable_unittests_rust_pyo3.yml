name: reusable_unittests_rust_pyo3

on:
  workflow_dispatch:
    inputs:
      windows:
        description: "Run unittests on windows"
        required: false
        default: false
        type: boolean
      macos:
        description: "Run unittests on macOS"
        required: false
        default: true
        type: boolean
      rust_package_name:
        description: "Name of the pure rust package"
        required: true
        type: string
  workflow_call:
    inputs:
      windows:
        description: "Run unittests on windows"
        required: false
        default: false
        type: boolean
      macos:
        description: "Run unittests on macOS"
        required: false
        default: true
        type: boolean
      rust_package_name:
        description: "Name of the pure rust package"
        required: true
        type: string

jobs:

  unittests_check_windows:
    if: ${{inputs.windows}}
    name: unittests-windows-${{ matrix.python.interpreter }}
    runs-on: "windows-latest"
    strategy:
      matrix:
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"},
            {py: '3.11', interpreter: "python3.11"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked


  unittests_check_macos:
    if: ${{inputs.macos}}
    name: unittests-macos-${{ matrix.python.interpreter }}
    runs-on: "macOS-latest"
    strategy:
      matrix:
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"},
            {py: '3.11', interpreter: "python3.11"}
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked
  
  unittests_check_linux:
    name: unittests-macos-${{ matrix.python.interpreter }}
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python: [
            {py: '3.7', interpreter: "python3.7"},
            {py: '3.8', interpreter: "python3.8"},
            {py: '3.9', interpreter: "python3.9"},
            {py: '3.10', interpreter: "python3.10"},
            {py: '3.11', interpreter: "python3.11"},
        ]
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: rustfmt
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.py }}
          cache: 'pip'
      - run: |
          python -m pip install numpy
          cargo test --workspace --no-default-features --locked
          cargo fmt --all -- --check

  doctest_check:
    name: unittests_check-${{ matrix.combinations.runs_on }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          default: true
      - run: |
          cargo test --doc --package=${{inputs.rust_package_name}}

  code_coverage_roqoqo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: stable
            components: llvm-tools-preview
            override: true
      - uses: taiki-e/install-action@cargo-llvm-cov
      - run: |
          cd qoqo_calculator
          cargo llvm-cov --no-default-features --lcov --output-path lcov_roqoqo.info --fail-under-lines=89